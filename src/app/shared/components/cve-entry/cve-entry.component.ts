import { Component, Input, OnInit } from '@angular/core';
import { LowMediumHighNumber } from '../../../model/assets';
import { ICVSSEntry, ThreatSeverities, ThreatSeverityUtil } from '../../../model/threat-model';
import { CvssEntryComponent } from '../cvss-entry/cvss-entry.component';

export interface ICVEEntry {
  ID: string;
  Published: string;
  VulnStatus: string;
  Scores: ICVSSEntry[];
  Severities: ThreatSeverities[];
  Description: string;
  SourceIdentifier: string;
  CweID: number;
}

export class ICVEEntryUtil {
  public static FromJSON(cve): ICVEEntry {
    let res: ICVEEntry = { ID: cve['id'], Published: cve['published'], VulnStatus: cve['vulnStatus'], Scores: [], Severities: [], Description: '', SourceIdentifier: cve['sourceIdentifier'], CweID: null };
    if (cve['metrics'] && Object.keys(cve['metrics']).length > 0) {
      Object.keys(cve['metrics']).forEach(key => {
        if (cve['metrics'][key]?.length > 0) {
          const entry = cve['metrics'][key][0]['cvssData'];
          let score = { Version: entry['version'], Vector: entry['vectorString'] };
          if (entry['baseScore']) score['Score'] = Number(entry['baseScore']);
          if (entry['version'] == '3.0' || entry['version'] == '3.1') {
            if (entry['attackVector']) score['AV'] = entry['attackVector'][0];
            if (entry['attackComplexity']) score['AC'] = entry['attackComplexity'][0];
            if (entry['privilegesRequired']) score['PR'] = entry['privilegesRequired'][0];
            if (entry['userInteraction']) score['UI'] = entry['userInteraction'][0];
            if (entry['scope']) score['S'] = entry['scope'][0];
            if (entry['confidentialityImpact']) score['C'] = entry['confidentialityImpact'][0];
            if (entry['integrityImpact']) score['I'] = entry['integrityImpact'][0];
            if (entry['availabilityImpact']) score['A'] = entry['availabilityImpact'][0];
          }
          if (entry['baseSeverity']) {
            if (entry['baseSeverity'] == 'LOW') res.Severities.push(ThreatSeverities.Low);
            else if (entry['baseSeverity'] == 'MEDIUM') res.Severities.push(ThreatSeverities.Medium);
            else if (entry['baseSeverity'] == 'HIGH') res.Severities.push(ThreatSeverities.High);
            else res.Severities.push(ThreatSeverities.Critical);
          }
          res.Scores.push(score as ICVSSEntry);
        }
      });
    }
    if (cve['descriptions']?.length > 0) {
      if (cve['descriptions'].length > 1) {
        res.Description = cve['descriptions'].find(x => x.lang == 'en')['value'];
      }
      else {
        res.Description = cve['descriptions'][0]['value'];
      }
    }
    if (cve['weaknesses']?.length > 0) {
      cve['weaknesses'].forEach(weakness => {
        if (res.CweID == null && weakness['description']?.length > 0) {
          const cwe = weakness['description'][0]['value'];
          if (!isNaN(Number(cwe.replace('CWE-', '')))) res.CweID = Number(cwe.replace('CWE-', ''));
        }
      });
    }
    return res;
  }
}

@Component({
  selector: 'app-cve-entry',
  templateUrl: './cve-entry.component.html',
  styleUrls: ['./cve-entry.component.scss']
})
export class CveEntryComponent implements OnInit {

  constructor() { }

  @Input() public entry: ICVEEntry;

  ngOnInit(): void {
  }

  public OpenCVE() {
    window.open(CveEntryComponent.GetURL(this.entry.ID), '_blank');
  }

  public OpenCVSS(score: ICVSSEntry) {
    window.open(CvssEntryComponent.GetURL(score), '_blank');
  }

  public GetVector(score: ICVSSEntry) {
    const vec = CvssEntryComponent.GetVector(score);
    return vec.substring(vec.indexOf('/')+1);
  }

  public GetSeverity(score: number) {
    return ThreatSeverityUtil.ToString(CvssEntryComponent.ToThreatSeverity(score));
  }

  public static GetURL(id: string): string {
    return 'https://nvd.nist.gov/vuln/detail/' + id;
  }
}
